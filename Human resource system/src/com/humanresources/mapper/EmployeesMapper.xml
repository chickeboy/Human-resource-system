<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.humanresources.mapper.EmployeesMapper" >
  <resultMap id="BaseResultMap" type="com.humanresources.bean.Employees" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
    <result column="entrytime" property="entrytime" jdbcType="TIMESTAMP" />
    <result column="basicsalary" property="basicsalary" jdbcType="DOUBLE" />
    <result column="performance" property="performance" jdbcType="DOUBLE" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="positionid" property="positionid" jdbcType="INTEGER" />
    <result column="departmentid" property="departmentid" jdbcType="INTEGER" />
  </resultMap>
  <resultMap type="com.humanresources.bean.EmployeesEx" id="findAllEmp">
   <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
    <result column="entrytime" property="entrytime" jdbcType="TIMESTAMP" />
    <result column="basicsalary" property="basicsalary" jdbcType="DOUBLE" />
    <result column="performance" property="performance" jdbcType="DOUBLE" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="positionid" property="positionid" jdbcType="INTEGER" />
    <result column="departmentid" property="departmentid" jdbcType="INTEGER" />
    <result column="position_name" property="position"/>
    <result column="department_name" property="department"/> 
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, birthday, entrytime, basicsalary, performance, state, positionid, departmentid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.humanresources.bean.EmployeesExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from employees
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from employees
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  
  <select id="findAllEmployees" resultMap="findAllEmp">
  select employees.*,position.name as position_name,department.name as department_name
  from employees,position,department
  where employees.positionid = position.id
  and employees.departmentid = department.id 
  </select>
  <select id="findemployeeById" resultType="com.humanresources.bean.Employees" parameterType="java.lang.Integer">
  select * from employees
  where id = #{id} 
  </select>
  
  
  
  
  
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from employees
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.humanresources.bean.EmployeesExample" >
    delete from employees
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.humanresources.bean.Employees" >
    insert into employees (id, name, birthday, 
      entrytime, basicsalary, performance, 
      state, positionid, departmentid
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{birthday,jdbcType=TIMESTAMP}, 
      #{entrytime,jdbcType=TIMESTAMP}, #{basicsalary,jdbcType=DOUBLE}, #{performance,jdbcType=DOUBLE}, 
      #{state,jdbcType=INTEGER}, #{positionid,jdbcType=INTEGER}, #{departmentid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.humanresources.bean.Employees" >
    insert into employees
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="birthday != null" >
        birthday,
      </if>
      <if test="entrytime != null" >
        entrytime,
      </if>
      <if test="basicsalary != null" >
        basicsalary,
      </if>
      <if test="performance != null" >
        performance,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="positionid != null" >
        positionid,
      </if>
      <if test="departmentid != null" >
        departmentid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="entrytime != null" >
        #{entrytime,jdbcType=TIMESTAMP},
      </if>
      <if test="basicsalary != null" >
        #{basicsalary,jdbcType=DOUBLE},
      </if>
      <if test="performance != null" >
        #{performance,jdbcType=DOUBLE},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="positionid != null" >
        #{positionid,jdbcType=INTEGER},
      </if>
      <if test="departmentid != null" >
        #{departmentid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.humanresources.bean.EmployeesExample" resultType="java.lang.Integer" >
    select count(*) from employees
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update employees
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null" >
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.entrytime != null" >
        entrytime = #{record.entrytime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.basicsalary != null" >
        basicsalary = #{record.basicsalary,jdbcType=DOUBLE},
      </if>
      <if test="record.performance != null" >
        performance = #{record.performance,jdbcType=DOUBLE},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.positionid != null" >
        positionid = #{record.positionid,jdbcType=INTEGER},
      </if>
      <if test="record.departmentid != null" >
        departmentid = #{record.departmentid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update employees
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      entrytime = #{record.entrytime,jdbcType=TIMESTAMP},
      basicsalary = #{record.basicsalary,jdbcType=DOUBLE},
      performance = #{record.performance,jdbcType=DOUBLE},
      state = #{record.state,jdbcType=INTEGER},
      positionid = #{record.positionid,jdbcType=INTEGER},
      departmentid = #{record.departmentid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.humanresources.bean.Employees" >
    update employees
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="entrytime != null" >
        entrytime = #{entrytime,jdbcType=TIMESTAMP},
      </if>
      <if test="basicsalary != null" >
        basicsalary = #{basicsalary,jdbcType=DOUBLE},
      </if>
      <if test="performance != null" >
        performance = #{performance,jdbcType=DOUBLE},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="positionid != null" >
        positionid = #{positionid,jdbcType=INTEGER},
      </if>
      <if test="departmentid != null" >
        departmentid = #{departmentid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.humanresources.bean.Employees" >
    update employees
    set name = #{name,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      entrytime = #{entrytime,jdbcType=TIMESTAMP},
      basicsalary = #{basicsalary,jdbcType=DOUBLE},
      performance = #{performance,jdbcType=DOUBLE},
      state = #{state,jdbcType=INTEGER},
      positionid = #{positionid,jdbcType=INTEGER},
      departmentid = #{departmentid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>